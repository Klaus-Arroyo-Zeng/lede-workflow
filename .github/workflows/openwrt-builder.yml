name: Build OpenWrt

on:
  workflow_dispatch:
    inputs:
        ssh:
          description: "Enable SSH debugging"
          required: false
          default: "true"
  # schedule:
  #   - cron: '0 20 * * *'
env:
  CONFIG_FILE: .config

permissions:
  contents: write

jobs:
  build:
    runs-on: ubuntu-22.04

    strategy:
      matrix:
        include:
          - name: JDcloud_AX1800PRO
            config: JDcloud_AX1800PRO.config
          # - name: N1
          #   config: N1.config

    name: Build ${{ matrix.name }}

    steps:
      - name: Checkout source
        uses: actions/checkout@v4

      - name: Setup build environment
        run: |
          sudo -E apt update
          sudo -E apt install -y \
            ack antlr3 asciidoc autoconf automake autopoint binutils bison build-essential \
            bzip2 ccache clang cmake cpio curl device-tree-compiler flex gawk gcc-multilib g++-multilib gettext \
            genisoimage git gperf haveged help2man intltool libc6-dev-i386 libelf-dev libfuse-dev libglib2.0-dev \
            libgmp3-dev libltdl-dev libmpc-dev libmpfr-dev libncurses5-dev libncursesw5-dev libpython3-dev \
            libreadline-dev libssl-dev libtool llvm lrzsz msmtp ninja-build p7zip p7zip-full patch pkgconf \
            python3 python3-pyelftools python3-setuptools qemu-utils rsync scons squashfs-tools subversion \
            swig texinfo uglifyjs upx-ucl unzip vim wget xmlto xxd zlib1g-dev
          sudo timedatectl set-timezone Asia/Shanghai
      - name: Free up disk space
        run: |
          echo "Before cleanup:"
          df -h
      
          # 删除不必要的包和文档
          sudo apt-get remove -y '^dotnet-.*' '^aspnetcore-.*' '^mysql-.*' || true
          sudo apt-get remove -y 'php.*' 'mongodb.*' 'llvm.*' || true
          sudo apt-get autoremove -y
          sudo apt-get clean
      
          # 删除大文件和缓存
          sudo rm -rf /usr/share/dotnet /usr/local/lib/android /opt/ghc /usr/local/share/boost || true
          sudo rm -rf "$AGENT_TOOLSDIRECTORY" || true
      
          echo "After cleanup:"
          df -h

      # - name: Load custom feeds
      #   run: |
      #     # echo "src-git nikki https://github.com/nikkinikki-org/OpenWrt-nikki.git;main" >> "feeds.conf.default"
      #     cd package
      #     git clone https://github.com/nikkinikki-org/OpenWrt-nikki.git
      #     mv OpenWrt-nikki/luci-app-nikki ./luci-app-nikki
      #     rm -rf OpenWrt-nikki
      - name: Git clone
        run: git clone https://github.com/coolsnowwolf/lede lede

      - name: Update feeds
        run: |
          cd lede
          ./scripts/feeds update -a
  
      - name: Install feeds
        run: |
          cd lede
          ./scripts/feeds install -a
      
      - name: Load config file
        run: |
          cd lede
          cp configs/${{ matrix.config }} .config
          # make defconfig
        
      - name: Setup tmate session (SSH debug)
        if: ${{ github.event.inputs.ssh == 'true' || contains(github.event.head_commit.message, '[ssh]') }}
        uses: mxschmitt/action-tmate@v3
        with:
          limit-access-to-actor: false  # 仅允许触发者访问 SSH 会话
        


      - name: Download sources
        run: |
          cd lede 
          make download -j$(nproc)

      - name: Build OpenWrt
        run: |
          cd lede
          make -j$(nproc) || make -j1 V=s

      - name: Package firmware
        run: |
          cd lede
          mkdir -p output
          ZIP_NAME="${{ matrix.name }}_firmware_$(date +%Y%m%d).zip"
          zip -r "output/$ZIP_NAME" bin/targets
      - name: Get current date
        id: build_time
        run: echo "date=$(date +%Y-%m-%d)" >> "$GITHUB_OUTPUT"
        
      - name: Upload firmware to Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: release-${{ matrix.name }}-${{ github.run_number }}
          name: "OpenWrt - ${{ matrix.name }} Build #${{ github.run_number }}"
          body: |
            自动构建设备：${{ matrix.name }}
            配置文件：${{ matrix.config }}
            构建时间：${{ steps.build_time.outputs.date }}
          files: output/*.zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
